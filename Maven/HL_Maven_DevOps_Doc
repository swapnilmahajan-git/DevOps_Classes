					MAVEN				

============
Phase-1
============
#1
	Java Build and Deployment End-To-End Workflow.

#2
Basics
	- Java program
	- Manual compilation

#3
What is Maven? Why we need a build tool?
	

#4
Installation
	- Download openjdk and extract it.
	- Download Apache Maven and extract it.
	- Set-up below Environment variables for Maven and JDK in order to run Maven
	  and JDK commands from any directory in the system.
		1. JAVA_HOME
		2. M2_HOME
		3. PATH

Installing JDK and Maven:
=======================
  A. create $USER_HOME/.bashrc
  
  B. create below Environment variables
	export M2_HOME=/home/swapnil/Documents/jenkins-server/apache-maven-3.3.9
	export JAVA_HOME=/home/swapnil/Documents/jenkins-server/jdk1.8.0_121
	export PATH=$M2_HOME/bin:$JAVA_HOME/bin:$PATH


Load .bashrc using below command or open new ternimial
	$ source .bashrc
 
Verify Installation
	$ java -version
	$ mvn --version


============
Phase-2
============

Maven's standard project layout
=================================
Project creation:
-----------------
java projects which are created by maven, ideally follows below project folder structure.
	
		flipkart
			|
			src		pom.xml
			|
	main--------- test
	|				|
   java		       java
	|				|
  (group .Id)	  (group.Id)
	|				|
App.java		AppTest.java


flipkart - is called "Project name" / "ArtifactID"
src 	 - Source folder which contains the 
				application source code
main	 - Contains application's main functional code
test	 - Contains application's unit testing code
pom.xml  - Maven's build file using which we can
				configure build steps such as 
				compilation, test runs, jar/war creation,
				deployments...etc.


#7
Creating a Java Project using Maven:
$ mvn archetype:generate -DgroupId=com.flipkart -DartifactId=flipkart -Dversion=1.0-SNAPSHOT -DinteractiveMode=false

	=> archetype:generate - this is generating maven project.
        => -DgroupId - this is package name. 
	=> -DartifactId - this is project name. 
	=> -Dversion - this is version. 
	=> -DinteractiveMode - keep always interactivemode is on false.


============
Phase-3
============

#8
Building the maven project:
-----------------------
Execute "mvn install":

	'mvn install' command executes below maven "build life cycle" phases automatically. 
	- validate
		validate project's structure
	- initialize
		prepares project with initial pre-
		requisites ex: setting properties, creating 
		necessary directory structure..etc.	 
	- compile
		compiles "main" java code.
	- test-compile
		compiles "test" java code
	- test
		Runs the test cases and generates test reports.
	- package
		creates jar/war.
	- install
		copy built artifacts i.e jar/war file into local repository $USER_HOME/.m2 
          
#9
Verify Built artifacts:
--------------------------
Go to "target" folder and observe below.
	
			target
			  |
		classes     test-classes	surefire-reports	jar/war file


	classes: directory contains compiled class files
				of main source code
	test-classes: directory contains compiled class
				files of test source code
				
	surefire-reports: contains test reports.

	flipkart-1.0-SNAPSHOT.jar: jar file of main code

#10
Artifact path in local repository .m2
# More about local repository
 $USER_HOME/.m2/repository/groupId/artifactId/version/jar_war_file_name  

- Package naming convention:
	artifactId-version.jar



============
Phase-4
============

#11: Maven Automatic Dependency resolution feature
	
	- Direct dependency
	- Transitive dependency(hamcrest is dependency of junit and becomes transitive dependency for our code)



Maven way of dependency addition, detection from different repositories.

#12
Maven repositories
	- Central
	- Private/Remote (Nexus/atifactrory)
	- Local (.m2)

#13
"mvn clean"  - remove old target folder from project directory.
	


============
Phase-5
============


#14
Build types
	- Complete build/Clean build/Full build
	- Incremental build
	- Nightly build
	- Daily build
	- bugfix build
	- adhoc/unplanned/emergency builds

#15
Skipping test cases:
	$ mvn install -DskipTests (skip test executon)
	$ mvn install -Dmaven.test.skip=true (skip test code compilation and execution)

#16
Run only unit testing i.e 'test' life cycle phase
	$ mvn surefire:test

#17
Where Maven's coordinates/GAV parameters come into picture / helpful?
	- Decide artifact storage path in local/central/remote repositories
	- Decide jar/war names.
	- Define a particular version of the jar file to be downloaded during dependency resolution.


============
Phase-6
============

--> web app builds
For WebApps, to generate the war file, use: -DarchetypeArtifactId=maven-archetype-webapp, option as part of 'mvn archetype:generate' command which you have used before for stand-alone application.


PROJECT-01 --> CREATE MAVEN web application for flipkart and perform end-to-end build and deployment.
===========    =======================================================================================

#
create one folder where we want to store our project
$ mkdir sourceCode

#
go to that created folder i.e. sourceCode 
$ cd sourceCode/

# 
After Create Maven web application project in our created directory usign below command.
$ mvn archetype:generate -DgroupId=com.flipkart -DartifactId=flipkart -Dversion=1.0-SNAPSHOT -DinteractiveMode=false -DarchetypeArtifactId=maven-archetype-webapp

#
After go to the project directory
$ cd projectName/

#
After entering project directory Build the application using below Maven command
$ mvn install

#
After mvn install target folder is creating in project folder in this folder Check final artifact.
$ ls target 

#
Then Prepare tomcat for deployments / installation
- Download tomcat tar.gz file from apache.org site THEN 
- Extract it. THEN 
- Make sure JAVA_HOME and M2_HOME environment variable is set in .bashrc file.

#
Then copy flipkart.war file from target folder to tomcat webapps folder means, (Deploy flipkart.war into tomcat).
$ cp flipkart.war $TOMCAT_HOME/webapps

#
Start tomcat server
$ $TOMCAT_HOME/bin/startup.sh

#
Launch application with below URL.
http://localhost or system IP:8080/flipkart
[http://tomcat_server_name:8080/warfilename]



==============
Phase 7
=============

#26
- Building the War.
- Deployment into tomcat Server.

- Real time project --> End-to-End Build and Deployment Process:
=================================
Step 1.
-------
Install GIT
#
$ sudo apt-get update
$ sudo apt-get install git

Step 2.
-------
# Clone application source code into the build server from "Any Project" github repository.
$ git clone repo_url

Step 3.
------
Then go to the project directory then Build "Project" application using below command.
$ mvn install
	
-Based on the package and <finalName> attribute it produces the artifact(jar/war/ear)
-with given name and installs to .m2/repository/${groupId}/${artifactId}/${version}/${artifactId}-${version}.jar/war/ear.

-Assuming it's web application and .war is our final artifact, 
-we need to deploy it to some application server like tomcat to make application accessible by the end user. 

Step 4.
------- 
Deploy project.war application to remote server deployment location(i.e $TOMCAT_HOME/webapps) using below command or some shell or automation scripts.
	scp project.war user@192.168.0.4:/home/swapnil/jenkins-server/apache-tomcat-8.5.11/webapps

Step 4A.
--------
After the deployment, we need start the server using below tomcat startup comamnd.
	$TOMCAT_HOME/bin/startup.sh

Step 5.
-------
Tomcat by default runs on port 8080. So application can be accessed with URL like below.
	ex: http://IPAddress:8080/flipkart
		
Step 6.
-------
In case there is any issue in the application, errors will be logged in $TOMCAT_HOME/logs/catalina.2017-03-24.log file.
	We can check this file and if there are any errors/exceptions, we provide this info to developers.



